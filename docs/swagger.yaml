basePath: /api/v1
definitions:
  httputil.HttpError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  models.CreatePost:
    properties:
      content:
        type: string
      title:
        type: string
      user_id:
        type: integer
    type: object
  models.Post:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.UpdatePost:
    properties:
      content:
        type: string
      title:
        type: string
    type: object
  models.UpdateUser:
    properties:
      email:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: RESTful API created with GO for learning purposes
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: RESTful API with GO
  version: "1.0"
paths:
  /post:
    post:
      consumes:
      - application/json
      description: create post with json
      parameters:
      - description: Create post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.CreatePost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError'
      summary: Create a post
      tags:
      - post
  /post/{id}:
    delete:
      consumes:
      - application/json
      description: delete post with id
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError'
      summary: Delete a post
      tags:
      - post
    get:
      consumes:
      - application/json
      description: get post by id
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError'
      summary: Show a post
      tags:
      - post
    put:
      consumes:
      - application/json
      description: update post with json
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError'
      summary: Update a post
      tags:
      - post
  /posts:
    get:
      consumes:
      - application/json
      description: get posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError'
      summary: List posts
      tags:
      - post
  /user:
    post:
      consumes:
      - application/json
      description: create user with json
      parameters:
      - description: Create user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError'
      summary: Create a user
      tags:
      - user
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: delete user with id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HttpError'
      summary: Delete a user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: get user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError'
      summary: Show a user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: update user with json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError'
      summary: Update a user
      tags:
      - user
  /users:
    get:
      consumes:
      - application/json
      description: get users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HttpError'
      summary: List users
      tags:
      - user
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
